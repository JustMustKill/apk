#include <dos.h>
#include <stdio.h>
#include <stdlib.h>
#include <conio.h>

#define base  1193180
#define SHORT_MAX  65535

enum NOTE
{
	c = 261,
	cS = 277,
	d = 293,
	dS = 311,
	e = 329,
	f = 349,
	fS = 370,
	g = 392,
	gS = 415,
	a = 440,
	aS = 455,
	b = 493,
	bl = 246,
	flS = 185,
	fHS = 740,
	
	dl = 148,
	el = 165,
	fl = 175,
	gl = 196,
	gSl = 207,
	al = 220,
	aSl = 233
};

void printByte(char byte);

void printChanelStatus(char chanel) {
	char controlByte = 0xE0;
	char chanelPort = 0x40;
	switch (chanel) {
	case 0: {
		controlByte = 0xE2;		
		chanelPort = 0x40;
		break;
	}
	case 1: {
		controlByte = 0xE4;		
		chanelPort = 0x41;
		break;
	}
	case 2: {
		controlByte = 0xE8;		
		chanelPort = 0x42;
		break;
	}
	default: {
		printf("ERROR: Illegal printChanelStatus usage (ivalid chanel number %d)\n", chanel);
		return;
	}
	}
	outp(0x43, controlByte);
	char state = inp(chanelPort);
	printf("The \t%d-th chanel state: ", chanel);
	printByte(state);
	printf("\n");
}

void printByte(char byte) {
	char i;
	char byteBuf[8];
	for (i = 7; i >= 0; i--) {
		byteBuf[i] = (byte % 2) ? '1' : '0';
		byte /= 2;
	}
	for (i = 0; i < 8; i++) {
		printf("%c", byteBuf[i]);
	}
}

void printChanelKD(short chanel) {
	char controlByte;
	char chanelPort;
	switch (chanel) {
	case 0: {
		controlByte = 0xD0;		
		chanelPort = 0x40;
		break;
	}
	case 1: {
		controlByte = 0xD0;		
		chanelPort = 0x41;
		break;
	}
	case 2: {
		controlByte = 0xD0;	
		chanelPort = 0x42;
		break;
	}
	default: {
		printf("ERROR: Illegal printChanelKD usage (ivalid chanel number %d)\n", chanel);
		return;
	}
	}
	unsigned short int kd = 0, kdHigh = 0, kdLow = 0, kdMax = 0, i;

	for (i = 0, kdMax = 0; i < SHORT_MAX; i++) {
		outp(0x43, controlByte);
		kdLow = inp(chanelPort);
		kdHigh = inp(chanelPort);
		kd = kdHigh * 256 + kdLow;
		if (kd > kdMax)
		{
			printf("new kdMax: %hx\n", kd);
			kdMax = kd;
		}
	}
	printf("The %d-th chanel kd: \t%hx\n", chanel, kdMax);
}


void random(long maxNumber)
{
	long kdNew = 0, kdLow = 0, kdHigh = 0;
	long prevState = inp(0x61);
	outp(0x61, inp(0x61) & 0xFC | 0x01);	// disable dynamic, enable tick

	outp(0x43, 0xB4); 
	outp(0x42, maxNumber % 256);	// low byte
	outp(0x42, maxNumber / 256);	// high byte	

	int i = 0;
	for (i = 0; i < 5; i++)
	{
		delay(i);
		kdLow = inp(0x42);
		kdHigh = inp(0x42);
		kdNew = kdHigh * 256 + kdLow;
		printf("%d\n", kdNew);
	}
	outp(0x61, prevState);
}

void playSound(int note, int duration) {
	int kd;
	outp(0x43, 0xB6);

	kd = base / note;

	outp(0x42, kd % 256);
	kd /= 256;
	outp(0x42, kd);

	outp(0x61, inp(0x61) | 0x03);
	delay(duration);

	outp(0x61, inp(0x61) & 0xFC);
	// switch pause
	delay(duration / 3);
}

void doRock()
{
	//Rammstein - Mutter
	playSound(e, 370);
	playSound(bl, 370);
	playSound(e, 370);
	playSound(g, 200);
	playSound(e, 200);
	playSound(b, 370);
	playSound(g, 370);
	playSound(e, 370);
	playSound(bl, 200);
	playSound(a, 250);

	playSound(bl, 200);
	playSound(flS, 200);
	playSound(bl, 200);
	playSound(dS, 200);
	playSound(fS, 200);
	playSound(b, 200);
	playSound(fS, 200);
	playSound(dS, 200);

	playSound(bl, 200);
	playSound(flS, 200);
	playSound(bl, 200);
	playSound(dS, 200);
	playSound(fS, 200);
	playSound(b, 200);
	playSound(fS, 200);
	playSound(dS, 200);

	playSound(e, 220);
	playSound(e, 220);
	playSound(e, 220);
	playSound(e, 400);
	playSound(e, 400);
	playSound(g, 400);
	playSound(g, 400);
	playSound(g, 400);
	playSound(fS, 500);

	playSound(fS, 220);
	playSound(fS, 220);
	playSound(fS, 220);
	playSound(fS, 400);
	playSound(fS, 400);
	playSound(g, 400);
	playSound(fS, 250);
	playSound(g, 400);
	playSound(fS, 500);

	playSound(e, 220);
	playSound(e, 220);
	playSound(e, 220);
	playSound(e, 400);
	playSound(e, 400);
	playSound(c, 400);
	playSound(c, 400);
	playSound(d, 400);
	playSound(c, 500);

	playSound(fS, 220);
	playSound(fS, 220);
	playSound(fS, 220);
	playSound(fS, 350);
	playSound(fS, 350);
	playSound(g, 370);
	playSound(fS, 300);
	playSound(g, 370);
	playSound(fS, 500);

	playSound(e, 200);
	playSound(e, 200);
	playSound(e, 200);
	playSound(e, 400);
	playSound(e, 400);
	playSound(g, 400);
	playSound(g, 400);
	playSound(g, 400);
	playSound(fS, 500);

	playSound(fS, 200);
	playSound(fS, 200);
	playSound(fS, 200);
	playSound(fS, 400);
	playSound(fS, 400);
	playSound(g, 400);
	playSound(fS, 250);
	playSound(g, 400);
	playSound(fS, 500);

	playSound(e, 200);
	playSound(e, 200);
	playSound(e, 200);
	playSound(e, 400);
	playSound(e, 400);
	playSound(c, 400);
	playSound(c, 400);
	playSound(d, 400);
	playSound(c, 500);

	playSound(fS, 200);
	playSound(fS, 200);
	playSound(fS, 200);
	playSound(fS, 350);
	playSound(fS, 350);
	playSound(g, 370);
	playSound(fS, 250);
	playSound(g, 370);
	playSound(fS, 500);
	
	playSound(dS, 250);
	playSound(e, 850);

	playSound(fS, 250);
	playSound(g, 250);
	playSound(b, 850);

	playSound(b, 250);
	playSound(a, 250);
	playSound(b, 250);
	playSound(a, 250);
	playSound(fS, 800);

	playSound(fS, 400);
	playSound(g, 400);
	playSound(fS, 400);
	playSound(dS, 250);
	playSound(e, 850);

	playSound(fS, 250);
	playSound(g, 250);
	playSound(b, 850);

	playSound(b, 250);
	playSound(a, 250);
	playSound(b, 250);
	playSound(a, 250);
	playSound(fS, 800);

	playSound(fS, 400);
	playSound(g, 400);
	playSound(fS, 400);
	playSound(e, 600);
	delay(1000);





	//
	playSound(al, 500);
	playSound(al, 500);
	playSound(al, 500);
	playSound(fl, 350);
	playSound(c, 150);

	playSound(al, 500);
	playSound(fl, 350);
	playSound(c, 150);
	playSound(al, 1000);

	playSound(e, 500);
	playSound(e, 500);
	playSound(e, 500);
	playSound(f, 350);
	playSound(c, 150);

	playSound(gSl, 500);
	playSound(fl, 350);
	playSound(c, 150);
	playSound(al, 1000);

	playSound(a, 500);
	playSound(al, 350);
	playSound(al, 150);
	playSound(a, 500);
	playSound(gS, 250);
	playSound(g, 250);

	playSound(fS, 125);
	playSound(f, 125);
	playSound(fS, 250);
	delay(250);
	playSound(aSl, 250);
	playSound(dS, 500);
	playSound(d, 250);
	playSound(cS, 250);

	playSound(c, 125);
	playSound(bl, 125);
	playSound(c, 250);
	delay(250);
	playSound(fl, 125);
	playSound(gSl, 500);
	playSound(fl, 375);
	playSound(al, 125);

	playSound(c, 500);
	playSound(al, 375);
	playSound(c, 125);
	playSound(e, 1000);

	playSound(a, 500);
	playSound(al, 350);
	playSound(al, 150);
	playSound(a, 500);
	playSound(gS, 250);
	playSound(g, 250);

	playSound(fS, 125);
	playSound(f, 125);
	playSound(fS, 250);
	delay(250);
	playSound(aSl, 250);
	playSound(dS, 500);
	playSound(d, 250);
	playSound(cS, 250);

	playSound(c, 125);
	playSound(bl, 125);
	playSound(c, 250);
	delay(250);
	playSound(fl, 250);
	playSound(gSl, 500);
	playSound(fl, 375);
	playSound(c, 125);

	playSound(al, 500);
	playSound(fl, 375);
	playSound(c, 125);
	playSound(al, 1000);
}

int main() {
	// 1) get states
	printChanelStatus(0);
	printChanelStatus(1);
	printChanelStatus(2);

	// 2) get kd
	printChanelKD(0);
	printChanelKD(1);
	printChanelKD(2);

	// 3) print random numbers
	long maxRandom;
	printf("Enter max random number: ");
	scanf("%ld", &maxRandom);
	random(maxRandom);

	// 2) get kd
	printChanelKD(0);
	printChanelKD(1);
	printChanelKD(2);

	// 4) play sound
	doRock();

	return 0;
}
